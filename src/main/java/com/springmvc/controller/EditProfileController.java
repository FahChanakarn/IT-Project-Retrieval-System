package com.springmvc.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.servlet.http.HttpSession;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.springmvc.manager.Student496Manager;
import com.springmvc.model.Student496;

@Controller
public class EditProfileController {

	// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
	private static final String PROFILE_UPLOAD_PATH = "D:/Project496Uploads/profileImages";

	@RequestMapping(value = "/editProfile", method = RequestMethod.GET)
	public ModelAndView showEditForm(HttpSession session) {
		Student496 student = (Student496) session.getAttribute("student");

		if (student == null) {
			return new ModelAndView("redirect:/loginStudent496");
		}

		String projectName = "";
		if (student.getProject() != null) {
			projectName = student.getProject().getProj_NameTh();
		}

		ModelAndView mav = new ModelAndView("editProfile");
		mav.addObject("projectName", projectName);
		return mav;
	}

	@RequestMapping(value = "/updateProfile", method = RequestMethod.POST)
	public ModelAndView updateProfile(HttpServletRequest request,
			@RequestParam(value = "imageFile", required = false) MultipartFile imageFile, HttpSession session) {

		Student496Manager manager = new Student496Manager();
		Student496 student = (Student496) session.getAttribute("student");

		if (student == null) {
			return new ModelAndView("redirect:/loginStudent496");
		}

		// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å request
		String firstName = request.getParameter("stu_firstName");
		String lastName = request.getParameter("stu_lastName");
		String password = request.getParameter("stu_password");

		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password)
		if (firstName == null || lastName == null || firstName.trim().isEmpty() || lastName.trim().isEmpty()) {

			String projectName = getProjectName(student);
			ModelAndView mav = new ModelAndView("editProfile");
			mav.addObject("projectName", projectName);
			mav.addObject("error", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
			return mav;
		}

		// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
		student.setStu_firstName(firstName.trim());
		student.setStu_lastName(lastName.trim());

		// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏°‡∏≤
		if (password != null && !password.trim().isEmpty()) {
			if (password.trim().length() < 6) {
				String projectName = getProjectName(student);
				ModelAndView mav = new ModelAndView("editProfile");
				mav.addObject("projectName", projectName);
				mav.addObject("error", "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
				return mav;
			}
			String hashedPassword = PasswordUtil.hashPassword(password.trim());
			student.setStu_password(hashedPassword);
			System.out.println("üîê Password updated and hashed for student: " + student.getStuId());
		} else {
			System.out.println("‚ÑπÔ∏è Password not changed for student: " + student.getStuId());
		}
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å password ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô object student

		// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
		if (imageFile != null && !imageFile.isEmpty()) {
			String uploadResult = handleImageUpload(imageFile, student);
			if (uploadResult != null) { // ‡∏°‡∏µ error
				String projectName = getProjectName(student);
				ModelAndView mav = new ModelAndView("editProfile");
				mav.addObject("projectName", projectName);
				mav.addObject("error", uploadResult);
				return mav;
			}
		}

		try {
			// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
			manager.updateStudent(student);
			session.setAttribute("student", student);

			// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
			String projectName = getProjectName(student);
			ModelAndView mav = new ModelAndView("editProfile");
			mav.addObject("projectName", projectName);
			mav.addObject("success", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
			return mav;

		} catch (Exception e) {
			e.printStackTrace();
			String projectName = getProjectName(student);
			ModelAndView mav = new ModelAndView("editProfile");
			mav.addObject("projectName", projectName);
			mav.addObject("error", "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + e.getMessage());
			return mav;
		}
	}

	// ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
	private String handleImageUpload(MultipartFile imageFile, Student496 student) {
		try {
			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
			String contentType = imageFile.getContentType();
			if (!contentType.equals("image/jpeg") && !contentType.equals("image/png")
					&& !contentType.equals("image/jpg")) {
				return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå JPG ‡∏´‡∏£‡∏∑‡∏≠ PNG ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
			}

			// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (5MB)
			if (imageFile.getSize() > 5 * 1024 * 1024) {
				return "‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB";
			}

			// ‚úÖ ‡πÉ‡∏ä‡πâ absolute path
			File uploadDir = new File(PROFILE_UPLOAD_PATH);
			if (!uploadDir.exists()) {
				uploadDir.mkdirs();
				System.out.println("üìÅ Created profile upload directory: " + PROFILE_UPLOAD_PATH);
			}

			// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
			String oldImagePath = student.getStu_image();
			if (oldImagePath != null && !oldImagePath.isEmpty() && !oldImagePath.contains("default-profile.png")) {
				String oldFileName = oldImagePath;
				// ‡∏ñ‡πâ‡∏≤ oldImagePath ‡πÄ‡∏õ‡πá‡∏ô path ‡πÄ‡∏ï‡πá‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
				if (oldImagePath.contains("/") || oldImagePath.contains("\\")) {
					oldFileName = oldImagePath
							.substring(Math.max(oldImagePath.lastIndexOf('/'), oldImagePath.lastIndexOf('\\')) + 1);
				}
				File oldFile = new File(PROFILE_UPLOAD_PATH + File.separator + oldFileName);
				if (oldFile.exists()) {
					boolean deleted = oldFile.delete();
					System.out.println(
							"üóëÔ∏è Deleted old profile image: " + oldFile.getAbsolutePath() + " - Success: " + deleted);
				}
			}

			// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
			String fileName = student.getStuId() + "_" + System.currentTimeMillis() + "_"
					+ imageFile.getOriginalFilename();
			File dest = new File(PROFILE_UPLOAD_PATH + File.separator + fileName);
			imageFile.transferTo(dest);

			// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà path ‡πÄ‡∏ï‡πá‡∏°)
			student.setStu_image(fileName);

			System.out.println("üì∏ Profile image saved: " + dest.getAbsolutePath());
			System.out.println("üíæ Image filename in DB: " + fileName);

			return null; // ‡πÑ‡∏°‡πà‡∏°‡∏µ error

		} catch (IOException e) {
			e.printStackTrace();
			return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: " + e.getMessage();
		}
	}

	// ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
	private String getProjectName(Student496 student) {
		if (student.getProject() != null) {
			return student.getProject().getProj_NameTh();
		}
		return "";
	}

	// ‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
	@RequestMapping(value = "/profileImage/{filename}", method = RequestMethod.GET)
	public void getProfileImage(@PathVariable("filename") String filename, HttpServletResponse response)
			throws IOException {

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå default ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if ("default-profile.png".equals(filename)) {
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Default image should be handled by web server");
			return;
		}

		File imageFile = new File(PROFILE_UPLOAD_PATH + File.separator + filename);

		if (!imageFile.exists()) {
			System.err.println("‚ùå Profile image not found: " + imageFile.getAbsolutePath());
			response.sendError(HttpServletResponse.SC_NOT_FOUND, "Profile image not found");
			return;
		}

		// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content-Type ‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
		String contentType = "image/jpeg"; // default
		if (filename.toLowerCase().endsWith(".png")) {
			contentType = "image/png";
		} else if (filename.toLowerCase().endsWith(".jpg") || filename.toLowerCase().endsWith(".jpeg")) {
			contentType = "image/jpeg";
		}

		response.setContentType(contentType);
		response.setContentLength((int) imageFile.length());

		// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cache headers
		response.setHeader("Cache-Control", "public, max-age=86400"); // cache 1 ‡∏ß‡∏±‡∏ô
		response.setDateHeader("Expires", System.currentTimeMillis() + 86400 * 1000L);

		// ‡∏™‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
		try (FileInputStream fis = new FileInputStream(imageFile)) {
			byte[] buffer = new byte[4096];
			int bytesRead;
			while ((bytesRead = fis.read(buffer)) != -1) {
				response.getOutputStream().write(buffer, 0, bytesRead);
			}
			response.getOutputStream().flush();
		} catch (IOException e) {
			System.err.println("‚ùå Error serving profile image: " + filename + " - " + e.getMessage());
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error serving image");
		}
	}
}