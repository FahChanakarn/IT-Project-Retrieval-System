package com.springmvc.manager;

import com.springmvc.model.DocumentFile;
import com.springmvc.model.HibernateConnection;
import com.springmvc.model.Project;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.query.Query;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;

public class UploadManager {

	// ‚úÖ ‡πÉ‡∏ä‡πâ path ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
	private static final String UPLOAD_BASE_PATH = "D:/Project496Uploads/uploadsFile";

	public List<DocumentFile> getFilesByProject(int projectId) {
		SessionFactory sessionFactory = HibernateConnection.doHibernateConnection();
		Session session = sessionFactory.openSession();

		Query<DocumentFile> query = session.createQuery(
				"FROM DocumentFile WHERE project.projectId = :pid ORDER BY file_no ASC", DocumentFile.class);
		query.setParameter("pid", projectId);

		List<DocumentFile> list = query.list();
		session.close();
		return list;
	}

	public void saveFile(int projectId, String fileType, String fileName, MultipartFile file, String videoLink,
			ServletContext context) {

		SessionFactory sessionFactory = HibernateConnection.doHibernateConnection();
		Session session = sessionFactory.openSession();
		session.beginTransaction();

		DocumentFile doc = new DocumentFile();
		Project project = session.get(Project.class, projectId);
		doc.setProject(project);
		doc.setFiletype(fileType);
		doc.setFilename(fileName);

		LocalDateTime localDateTime = LocalDateTime.now();
		Date date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
		doc.setSendDate(date);
		doc.setStatus("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

		// ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï path ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
		new File(UPLOAD_BASE_PATH).mkdirs(); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ

		if ("file".equals(fileType) && file != null && !file.isEmpty()) {
			try {
				// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
				String safeFilename = System.currentTimeMillis() + "_" + file.getOriginalFilename();
				String fullPath = UPLOAD_BASE_PATH + File.separator + safeFilename;

				// ‚úÖ debug log
				System.out.println("üìÇ Saving file to: " + fullPath);

				file.transferTo(new File(fullPath));

				// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ß‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà path ‡∏à‡∏£‡∏¥‡∏á)
				doc.setFilepath(safeFilename);

			} catch (IOException e) {
				e.printStackTrace();
				doc.setStatus("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
			}
		} else if ("video".equals(fileType)) {
			doc.setFilepath(videoLink); // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		}

		// ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
		Query<Integer> maxQuery = session
				.createQuery("SELECT MAX(fileno) FROM DocumentFile WHERE project.projectId = :pid", Integer.class);
		maxQuery.setParameter("pid", projectId);
		Integer maxNo = maxQuery.uniqueResult();
		doc.setFileno(maxNo == null ? 1 : maxNo + 1);

		session.save(doc);
		session.getTransaction().commit();
		session.close();
	}

	public DocumentFile getFileById(int fileId) {
		Session session = HibernateConnection.doHibernateConnection().openSession();
		DocumentFile file = session.get(DocumentFile.class, fileId);
		session.close();
		return file;
	}

	// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç method updateFileOrVideo
	public void updateFileOrVideo(int id, String filename, String videoLink, MultipartFile newFile,
			HttpServletRequest request) {
		Session session = HibernateConnection.doHibernateConnection().openSession();
		try {
			session.beginTransaction();
			DocumentFile file = session.get(DocumentFile.class, id);

			if (file == null) {
				throw new RuntimeException("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
			}

			// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
			file.setFilename(filename);

			if ("video".equals(file.getFiletype())) {
				// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏¥‡∏á‡∏Å‡πå
				file.setFilepath(videoLink);
				System.out.println("üé• Updated video link: " + videoLink);

			} else if ("file".equals(file.getFiletype()) && newFile != null && !newFile.isEmpty()) {
				// ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå PDF - ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà

				// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
				File uploadDir = new File(UPLOAD_BASE_PATH);
				if (!uploadDir.exists()) {
					uploadDir.mkdirs();
				}

				// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
				String oldFilePath = file.getFilepath();
				if (oldFilePath != null && !oldFilePath.isEmpty()) {
					File oldFile = new File(UPLOAD_BASE_PATH + File.separator + oldFilePath);
					if (oldFile.exists()) {
						boolean deleted = oldFile.delete();
						System.out.println(
								"üóëÔ∏è Deleted old file: " + oldFile.getAbsolutePath() + " - Success: " + deleted);
					}
				}

				// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
				String safeFilename = System.currentTimeMillis() + "_" + newFile.getOriginalFilename();
				String fullPath = UPLOAD_BASE_PATH + File.separator + safeFilename;

				try {
					newFile.transferTo(new File(fullPath));
					file.setFilepath(safeFilename); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡πÉ‡∏´‡∏°‡πà

					System.out.println("üìÑ Updated PDF file: " + fullPath);
					System.out.println("üíæ New filepath in DB: " + safeFilename);

				} catch (IOException e) {
					System.err.println("‚ùå Error saving new file: " + e.getMessage());
					throw new RuntimeException("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ: " + e.getMessage());
				}
			}

			// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï timestamp
			LocalDateTime localDateTime = LocalDateTime.now();
			Date date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
			file.setSendDate(date);

			session.merge(file); // ‡πÉ‡∏ä‡πâ merge ‡πÅ‡∏ó‡∏ô update ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
			session.getTransaction().commit();

			System.out.println("‚úÖ File updated successfully - ID: " + id);

		} catch (Exception e) {
			System.err.println("‚ùå Error updating file: " + e.getMessage());
			e.printStackTrace();
			if (session.getTransaction().isActive()) {
				session.getTransaction().rollback();
			}
			throw new RuntimeException("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå: " + e.getMessage());
		} finally {
			if (session != null && session.isOpen()) {
				session.close();
			}
		}
	}
}